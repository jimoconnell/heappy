#!/usr/bin/env python3

import re
import sys
import glob
import os

# Regular expression pattern to match heap memory usage
pattern = r"heap.memory.used=(\d+\.\d+G), heap.memory.free=(\d+\.\d+G), heap.memory.total=(\d+\.\d+G), heap.memory.max=(\d+\.\d+G)"
ip_address_pattern = r"\[(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})\]"

if len(sys.argv) < 2:
    print("Please provide the path to the log file(s) as command-line argument(s).")
    sys.exit(1)

log_files = sys.argv[1:]

used_total_ratio = []
usage_info = []
summary_mode = False
graph_mode = False

# Check if "--summary" or "--graph" flag is provided
if len(sys.argv) > 2:
    if sys.argv[2] == "--summary":
        summary_mode = True
    elif sys.argv[2] == "--graph":
        graph_mode = True

for log_file in log_files:
    for file in glob.glob(log_file):
        file_name = os.path.basename(log_file)
        with open(file, "r") as file:
            for line in file:
                ip_match = re.search(ip_address_pattern, line)
                server_ip = ip_match.group(1) if ip_match else ""
                match = re.search(pattern, line)
                if match:
                    used_memory = float(match.group(1)[:-1])
                    total_memory = float(match.group(3)[:-1])
                    timestamp = line[:23]  # Extract the timestamp

                    # Skip if total_memory is zero to avoid division by zero
                    if total_memory == 0:
                        continue

                    used_percent = (used_memory / total_memory) * 100
                    used_total_ratio.append(used_percent)
                    usage_info.append((file, timestamp, used_percent))

                    if not graph_mode:
                        if not summary_mode:
                            print(f"File: {file_name}")
                            print(f"IP: {server_ip}")
                            print(f"Timestamp: {timestamp}")
                            print(f"Heap Memory Usage: Used={used_memory}G, Free={match.group(2)}, Total={match.group(3)}, Max={match.group(4)}")
                            print(f"Used Heap as Percentage of Total: {used_percent:.2f}%")
                            print()
                    else:
                        print(f"{timestamp} |{'‚èπ' * int(used_percent)} {' ' * (100 - int(used_percent))}| {used_percent:.2f}%")

if used_total_ratio:
    average_ratio = sum(used_total_ratio) / len(used_total_ratio)
    print(f"File: {file_name}")
    print(f"Server IP: {server_ip}")
    print(f"Average Used Heap as Percentage of Total: {average_ratio:.2f}%")

    if usage_info:
        highest_usage = max(usage_info, key=lambda x: x[2])
        lowest_usage = min(usage_info, key=lambda x: x[2])
        print(f"Highest Heap Usage: {highest_usage[2]:.2f}% occurred at {highest_usage[1]}")
        print(f"Lowest Heap Usage: {lowest_usage[2]:.2f}% occurred at {lowest_usage[1]}")
    else:
        print("No heap usage information found in the log file(s).")
else:
    print("No heap usage information found in the log file(s).")

